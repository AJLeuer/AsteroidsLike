<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="struct_vectr" kind="struct" prot="public">
    <compoundname>Vectr</compoundname>
    <basecompoundref refid="struct_position" prot="public" virt="non-virtual">Position&lt; float &gt;</basecompoundref>
    <includes refid="_position_8hpp" local="no">Position.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="struct_vectr_1a1cc9dc723075fb24116b6a78ac73e786" prot="protected" static="yes" mutable="no">
        <type><ref refid="class_basic_mutex" kindref="compound">BasicMutex</ref> *</type>
        <definition>BasicMutex * Vectr&lt; N &gt;::sharedVelMutex</definition>
        <argsstring></argsstring>
        <name>sharedVelMutex</name>
        <initializer>= <ref refid="struct_velocity" kindref="compound">Velocity</ref>&lt;N&gt;::sharedVelMutex</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="999" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="999" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="struct_vectr_1a42723f75b3084b9285cbd205388ba90e" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt;</type>
        <definition>Position&lt;N&gt; Vectr&lt; N &gt;::last</definition>
        <argsstring></argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="struct_position" kindref="compound">Position</ref> preceding the most recent <ref refid="struct_position" kindref="compound">Position</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1004" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vectr_1a1ef69f90f664d37b4281a02d12b08693" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt;</type>
        <definition>Position&lt;N&gt; Vectr&lt; N &gt;::mostRecent</definition>
        <argsstring></argsstring>
        <name>mostRecent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="struct_position" kindref="compound">Position</ref> most recently visited </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1009" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vectr_1ae3215bf0713f2bb9a40f60c0215b4b83" prot="protected" static="no" mutable="no">
        <type>const <ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt; *</type>
        <definition>const Position&lt;N&gt;* Vectr&lt; N &gt;::current</definition>
        <argsstring></argsstring>
        <name>current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the current <ref refid="struct_position" kindref="compound">Position</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1014" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vectr_1a4634576eedac8a5b4651991e0c1f0d4d" prot="protected" static="no" mutable="no">
        <type>N</type>
        <definition>N Vectr&lt; N &gt;::absDistanceMoved</definition>
        <argsstring></argsstring>
        <name>absDistanceMoved</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The non-normalized distance between the current <ref refid="struct_position" kindref="compound">Position</ref> and mostRecent <ref refid="struct_position" kindref="compound">Position</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1019" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1019" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vectr_1a577bdf47f67b34585ee08696679b2232" prot="protected" static="no" mutable="no">
        <type>N *</type>
        <definition>N* Vectr&lt; N &gt;::totalDistanceMoved</definition>
        <argsstring></argsstring>
        <name>totalDistanceMoved</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1021" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vectr_1aef611170eac7b1341ff345b9bb108eb7" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_velocity" kindref="compound">Velocity</ref>&lt; N &gt; *</type>
        <definition>Velocity&lt;N&gt;* Vectr&lt; N &gt;::velocity</definition>
        <argsstring></argsstring>
        <name>velocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Monitors velocity </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1026" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_vectr_1a2dc13bbf566571029a2069a87d165b30" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Vectr&lt; N &gt;::sharedVelBool</definition>
        <argsstring></argsstring>
        <name>sharedVelBool</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1029" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1029" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="struct_vectr_1ae04cf340dddfe1cd05c8dec90e34dd4a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>(const Position&lt; float &gt; &amp;overrideCurrData, const Position&lt; N &gt; *current_, bool monitorVelocity)</argsstring>
        <name>Vectr</name>
        <param>
          <type>const <ref refid="struct_position" kindref="compound">Position</ref>&lt; float &gt; &amp;</type>
          <declname>overrideCurrData</declname>
        </param>
        <param>
          <type>const <ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt; *</type>
          <declname>current_</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>monitorVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1032" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1123" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a072798a344fe237c3456f1e962f18672" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vectr&lt; N &gt;::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1034" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1314" bodyend="1329"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_vectr_1a420d21073da712360069e09ae8053375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>()</argsstring>
        <name>Vectr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1039" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1088" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1ad66fbd7bd3c07f5dbbc3219fe55b38a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>(float headingX, float headingY, float headingZ, bool monitorVelocity)</argsstring>
        <name>Vectr</name>
        <param>
          <type>float</type>
          <declname>headingX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>headingY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>headingZ</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>monitorVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1040" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1095" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a9be0609df512b225181c555f1c9adecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>(float headingX, float headingY, float headingZ, Position&lt; N &gt; *current_, bool monitorVelocity)</argsstring>
        <name>Vectr</name>
        <param>
          <type>float</type>
          <declname>headingX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>headingY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>headingZ</declname>
        </param>
        <param>
          <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt; *</type>
          <declname>current_</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>monitorVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1041" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1109" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a70f3b6c158dc21d03cb449093126b939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>(const Position&lt; N &gt; &amp;mostRecent_, Position&lt; N &gt; *current_, bool monitorVelocity)</argsstring>
        <name>Vectr</name>
        <param>
          <type>const <ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt; &amp;</type>
          <declname>mostRecent_</declname>
        </param>
        <param>
          <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt; *</type>
          <declname>current_</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>monitorVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1042" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a80e5b2b4bafb5689b82bdf5d87cc4b49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>(const Position&lt; N &gt; *current_, bool monitorVelocity)</argsstring>
        <name>Vectr</name>
        <param>
          <type>const <ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt; *</type>
          <declname>current_</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>monitorVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1043" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1138" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a8328879b18c117c7b262ce53f5f1acb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>(const Vectr&lt; N &gt; &amp;other)</argsstring>
        <name>Vectr</name>
        <param>
          <type>const <ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1044" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1154" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1abf42e2cb15d0406f24c5901dbf0a07e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>(const Vectr&lt; N &gt; &amp;other, bool monitorVelocity)</argsstring>
        <name>Vectr</name>
        <param>
          <type>const <ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>monitorVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1045" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1170" bodyend="1183"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a394981732ad6d227e5fe1f25f783ce99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::Vectr</definition>
        <argsstring>(Vectr&lt; N &gt; &amp;&amp;other)</argsstring>
        <name>Vectr</name>
        <param>
          <type><ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1046" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1187" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1affbf285f9295dd163cc8b0364b871ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vectr&lt; N &gt;::~Vectr</definition>
        <argsstring>()</argsstring>
        <name>~Vectr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1047" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1201" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1ac2e10f418e5b70d4a48bdfad9bf882c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vectr" kindref="compound">Vectr</ref> &amp;</type>
        <definition>Vectr&lt; N &gt; &amp; Vectr&lt; N &gt;::operator=</definition>
        <argsstring>(const Vectr&lt; N &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1048" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1226" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a94436033bb9fb7e6e970028e91dac958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vectr" kindref="compound">Vectr</ref> &amp;</type>
        <definition>Vectr&lt; N &gt; &amp; Vectr&lt; N &gt;::operator=</definition>
        <argsstring>(Vectr&lt; N &gt; &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1049" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1256" bodyend="1272"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a90b87763e1858fdaf27cbcd3b8758d0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vectr" kindref="compound">Vectr</ref></type>
        <definition>Vectr&lt; N &gt; Vectr&lt; N &gt;::copyVect</definition>
        <argsstring>(bool copyVelocity) const </argsstring>
        <name>copyVect</name>
        <param>
          <type>bool</type>
          <declname>copyVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1050" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1275" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a5dc06bff7605656f5d5294db219339b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_velocity" kindref="compound">Velocity</ref>&lt; N &gt; *</type>
        <definition>Velocity&lt;N&gt;* Vectr&lt; N &gt;::getVelocity</definition>
        <argsstring>()</argsstring>
        <name>getVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1052" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1052" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a0acef7840c315ea742390f8b96d6c782" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_position" kindref="compound">Position</ref> *</type>
        <definition>const Position* Vectr&lt; N &gt;::getCurrent</definition>
        <argsstring>() const </argsstring>
        <name>getCurrent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1054" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1054" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a96b306b6f36bc82f9dd68633f3d3568f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_position" kindref="compound">Position</ref></type>
        <definition>const Position Vectr&lt; N &gt;::getLast</definition>
        <argsstring>() const </argsstring>
        <name>getLast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1056" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1056" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1aa8638eb9a06d4947a77f800b501e74f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vectr&lt; N &gt;::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1058" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1332" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a94b119ab4adb045161a80a5278dbe0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vectr&lt; N &gt;::updateAndNormalize</definition>
        <argsstring>()</argsstring>
        <name>updateAndNormalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1060" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1344" bodyend="1347"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1ae4c3aa958a6d74d96ff119e63c3ae6ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>N</type>
        <definition>N Vectr&lt; N &gt;::getLastMoveDistance</definition>
        <argsstring>()</argsstring>
        <name>getLastMoveDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1062" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1062" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a8ef008609006c8cd2afa56abac2bbe25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_velocity" kindref="compound">Velocity</ref>&lt; N &gt; &amp;</type>
        <definition>Velocity&lt; N &gt; &amp; Vectr&lt; N &gt;::calculateVelocity</definition>
        <argsstring>()</argsstring>
        <name>calculateVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1064" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1350" bodyend="1352"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_vectr_1ad293e3f67a0483060d69b4de5dcfe5d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt;</type>
        <definition>Position&lt; N &gt; Vectr&lt; N &gt;::calculateNextPosition</definition>
        <argsstring>(Vectr&lt; N &gt; &amp;, float modifier=1.0)</argsstring>
        <name>calculateNextPosition</name>
        <param>
          <type><ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;</type>
          <defname>vec</defname>
        </param>
        <param>
          <type>float</type>
          <declname>modifier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1067" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1355" bodyend="1371"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1ac4d91db7639f1f74ba2492aaed2eb01d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt;</type>
        <definition>Position&lt; N &gt; Vectr&lt; N &gt;::calculateNextPositionChecked</definition>
        <argsstring>(Vectr&lt; N &gt; &amp;, float modifier=1.0, const BoundsCheck&lt; N &gt; &amp;=BoundsCheck&lt; N &gt;::defaultCheck)</argsstring>
        <name>calculateNextPositionChecked</name>
        <param>
          <type><ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;</type>
          <defname>vec</defname>
        </param>
        <param>
          <type>float</type>
          <declname>modifier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const <ref refid="struct_bounds_check" kindref="compound">BoundsCheck</ref>&lt; N &gt; &amp;</type>
          <defname>check</defname>
          <defval><ref refid="struct_bounds_check" kindref="compound">BoundsCheck</ref>&lt; N &gt;::defaultCheck</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1070" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1374" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1abeef5f4dfbd11b7c6bf40779cc191c0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt;</type>
        <definition>Position&lt; N &gt; Vectr&lt; N &gt;::calculateReverseNextPosition</definition>
        <argsstring>(Vectr&lt; N &gt; &amp;, float modifier=1.0, const BoundsCheck&lt; N &gt; &amp;=BoundsCheck&lt; N &gt;::defaultCheck)</argsstring>
        <name>calculateReverseNextPosition</name>
        <param>
          <type><ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;</type>
          <defname>vec</defname>
        </param>
        <param>
          <type>float</type>
          <declname>modifier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const <ref refid="struct_bounds_check" kindref="compound">BoundsCheck</ref>&lt; N &gt; &amp;</type>
          <defname>check</defname>
          <defval><ref refid="struct_bounds_check" kindref="compound">BoundsCheck</ref>&lt; N &gt;::defaultCheck</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1073" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1393" bodyend="1398"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1a7c8cfdf413bb152bcea5d14017220759" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt;</type>
        <definition>Position&lt; N &gt; Vectr&lt; N &gt;::calculateReverseXPosition</definition>
        <argsstring>(Vectr&lt; N &gt; &amp;, float modifier=1.0, const BoundsCheck&lt; N &gt; &amp;=BoundsCheck&lt; N &gt;::defaultCheck)</argsstring>
        <name>calculateReverseXPosition</name>
        <param>
          <type><ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;</type>
          <defname>vec</defname>
        </param>
        <param>
          <type>float</type>
          <declname>modifier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const <ref refid="struct_bounds_check" kindref="compound">BoundsCheck</ref>&lt; N &gt; &amp;</type>
          <defname>check</defname>
          <defval><ref refid="struct_bounds_check" kindref="compound">BoundsCheck</ref>&lt; N &gt;::defaultCheck</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1076" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1401" bodyend="1404"/>
      </memberdef>
      <memberdef kind="function" id="struct_vectr_1ab897fda165e543696ecdc622af191698" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_position" kindref="compound">Position</ref>&lt; N &gt;</type>
        <definition>Position&lt; N &gt; Vectr&lt; N &gt;::calculateReverseYPosition</definition>
        <argsstring>(Vectr&lt; N &gt; &amp;, float modifier=1.0, const BoundsCheck&lt; N &gt; &amp;=BoundsCheck&lt; N &gt;::defaultCheck)</argsstring>
        <name>calculateReverseYPosition</name>
        <param>
          <type><ref refid="struct_vectr" kindref="compound">Vectr</ref>&lt; N &gt; &amp;</type>
          <defname>vec</defname>
        </param>
        <param>
          <type>float</type>
          <declname>modifier</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const <ref refid="struct_bounds_check" kindref="compound">BoundsCheck</ref>&lt; N &gt; &amp;</type>
          <defname>check</defname>
          <defval><ref refid="struct_bounds_check" kindref="compound">BoundsCheck</ref>&lt; N &gt;::defaultCheck</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="1079" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="1407" bodyend="1410"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class provides facilities for calculating an object&apos;s current trajectory, predicting its next <ref refid="struct_position" kindref="compound">Position</ref>, monitoring its speed, maintaining a record of its last two Positions (for more detailed record keeping of past Positions, see <ref refid="struct_pos2" kindref="compound">Pos2</ref>), and more.</para><para>Note: do not use with unsigned ints </para>    </detaileddescription>
    <inheritancegraph>
      <node id="352">
        <label>Vectr&lt; N &gt;</label>
        <link refid="struct_vectr"/>
        <childnode refid="353" relation="public-inheritance">
        </childnode>
      </node>
      <node id="353">
        <label>Position&lt; float &gt;</label>
        <link refid="struct_position"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="358">
        <label>N</label>
      </node>
      <node id="356">
        <label>BasicMutex</label>
        <link refid="class_basic_mutex"/>
        <childnode refid="357" relation="public-inheritance">
        </childnode>
      </node>
      <node id="354">
        <label>Vectr&lt; N &gt;</label>
        <link refid="struct_vectr"/>
        <childnode refid="355" relation="public-inheritance">
        </childnode>
        <childnode refid="356" relation="usage">
          <edgelabel>sharedVelMutex</edgelabel>
        </childnode>
        <childnode refid="358" relation="usage">
          <edgelabel>absDistanceMoved</edgelabel>
          <edgelabel>totalDistanceMoved</edgelabel>
        </childnode>
      </node>
      <node id="355">
        <label>Position&lt; float &gt;</label>
        <link refid="struct_position"/>
      </node>
      <node id="357">
        <label>mutex</label>
      </node>
    </collaborationgraph>
    <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" line="995" column="1" bodyfile="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Util/Position.hpp" bodystart="995" bodyend="1082"/>
    <listofallmembers>
      <member refid="struct_vectr_1a4634576eedac8a5b4651991e0c1f0d4d" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>absDistanceMoved</name></member>
      <member refid="struct_position_1acbec1420f0dc8f505c745b399ae93234" prot="public" virt="non-virtual"><scope>Vectr</scope><name>calcDistance</name></member>
      <member refid="struct_vectr_1ad293e3f67a0483060d69b4de5dcfe5d2" prot="public" virt="non-virtual"><scope>Vectr</scope><name>calculateNextPosition</name></member>
      <member refid="struct_vectr_1ac4d91db7639f1f74ba2492aaed2eb01d" prot="public" virt="non-virtual"><scope>Vectr</scope><name>calculateNextPositionChecked</name></member>
      <member refid="struct_vectr_1abeef5f4dfbd11b7c6bf40779cc191c0e" prot="public" virt="non-virtual"><scope>Vectr</scope><name>calculateReverseNextPosition</name></member>
      <member refid="struct_vectr_1a7c8cfdf413bb152bcea5d14017220759" prot="public" virt="non-virtual"><scope>Vectr</scope><name>calculateReverseXPosition</name></member>
      <member refid="struct_vectr_1ab897fda165e543696ecdc622af191698" prot="public" virt="non-virtual"><scope>Vectr</scope><name>calculateReverseYPosition</name></member>
      <member refid="struct_vectr_1a8ef008609006c8cd2afa56abac2bbe25" prot="public" virt="non-virtual"><scope>Vectr</scope><name>calculateVelocity</name></member>
      <member refid="struct_position_1afd2bfedb3b315412862103233665fc02" prot="public" virt="non-virtual"><scope>Vectr</scope><name>checkBounds</name></member>
      <member refid="struct_position_1aaf90e9e75b999bf2c43064feaa3694eb" prot="public" virt="non-virtual"><scope>Vectr</scope><name>checkBounds</name></member>
      <member refid="struct_vectr_1a90b87763e1858fdaf27cbcd3b8758d0c" prot="public" virt="non-virtual"><scope>Vectr</scope><name>copyVect</name></member>
      <member refid="struct_vectr_1ae3215bf0713f2bb9a40f60c0215b4b83" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>current</name></member>
      <member refid="struct_vectr_1a0acef7840c315ea742390f8b96d6c782" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getCurrent</name></member>
      <member refid="struct_position_1a7c5b646e881251041b2373b0b9ee235b" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getIntX</name></member>
      <member refid="struct_position_1a2ddf4656749e96c1ad4bfec272521364" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getIntY</name></member>
      <member refid="struct_position_1a41e19d862bf29d4aef2e25fbdd58f6b2" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getIntZ</name></member>
      <member refid="struct_vectr_1a96b306b6f36bc82f9dd68633f3d3568f" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getLast</name></member>
      <member refid="struct_vectr_1ae4c3aa958a6d74d96ff119e63c3ae6ea" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getLastMoveDistance</name></member>
      <member refid="struct_vectr_1a5dc06bff7605656f5d5294db219339b6" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getVelocity</name></member>
      <member refid="struct_position_1a7d1262a6b6f63f04c605bebf93a1f068" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getX</name></member>
      <member refid="struct_position_1a71d93e9a234bc4f32a61781c4e88bc10" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getY</name></member>
      <member refid="struct_position_1a1d1171c9049c9a24be31bdb40e8662c0" prot="public" virt="non-virtual"><scope>Vectr</scope><name>getZ</name></member>
      <member refid="struct_vectr_1a42723f75b3084b9285cbd205388ba90e" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>last</name></member>
      <member refid="struct_position_1a71640a61fe271ddc9e2451037a11a86d" prot="public" virt="virtual"><scope>Vectr</scope><name>modify</name></member>
      <member refid="struct_position_1aa3e6b4d0e63e42c91332ffba79359252" prot="public" virt="virtual"><scope>Vectr</scope><name>modify</name></member>
      <member refid="struct_vectr_1a1ef69f90f664d37b4281a02d12b08693" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>mostRecent</name></member>
      <member refid="struct_position_1a81dd41480a91a0817c1937afef4cb644" prot="public" virt="virtual"><scope>Vectr</scope><name>moveHere</name></member>
      <member refid="struct_position_1a4fa2e78d31d34daba2d555394c4e4b80" prot="public" virt="virtual"><scope>Vectr</scope><name>moveHere</name></member>
      <member refid="struct_position_1a3840e7e0c17531cd254810fe62340f52" prot="public" virt="virtual"><scope>Vectr</scope><name>moveHere</name></member>
      <member refid="struct_position_1aa268c21ec09dbe0b579b0854ef74ddb9" prot="public" virt="virtual"><scope>Vectr</scope><name>moveHere</name></member>
      <member refid="struct_vectr_1aa8638eb9a06d4947a77f800b501e74f0" prot="public" virt="non-virtual"><scope>Vectr</scope><name>normalize</name></member>
      <member refid="struct_position_1a4be02284917613eaa574c3ebbbbbfcb8" prot="public" virt="virtual"><scope>Vectr</scope><name>operator!=</name></member>
      <member refid="struct_position_1acaf1ee869c4bee9e4a6b152eee96efda" prot="public" virt="virtual"><scope>Vectr</scope><name>operator!=</name></member>
      <member refid="struct_position_1a95f98be024d028f87681c12092afcb28" prot="public" virt="non-virtual"><scope>Vectr</scope><name>operator*</name></member>
      <member refid="struct_position_1acee225b72b18e2468a8015fe3585958e" prot="public" virt="non-virtual"><scope>Vectr</scope><name>operator+</name></member>
      <member refid="struct_position_1adc25e016e77688fabb733febd70dc3da" prot="public" virt="non-virtual"><scope>Vectr</scope><name>operator-</name></member>
      <member refid="struct_position_1a51bc2b1d3ba86057fc8605208d2fb4cf" prot="public" virt="non-virtual"><scope>Vectr</scope><name>operator/</name></member>
      <member refid="struct_vectr_1ac2e10f418e5b70d4a48bdfad9bf882c4" prot="public" virt="non-virtual"><scope>Vectr</scope><name>operator=</name></member>
      <member refid="struct_vectr_1a94436033bb9fb7e6e970028e91dac958" prot="public" virt="non-virtual"><scope>Vectr</scope><name>operator=</name></member>
      <member refid="struct_position_1a669073574ecd196d45ea9d2ff0e3cced" prot="public" virt="virtual" ambiguityscope="Position&lt; float &gt;::"><scope>Vectr</scope><name>operator=</name></member>
      <member refid="struct_position_1a580451251fc288d806524683fc85550a" prot="public" virt="virtual" ambiguityscope="Position&lt; float &gt;::"><scope>Vectr</scope><name>operator=</name></member>
      <member refid="struct_position_1ac895fed24f992ab43913207bd5fb7048" prot="public" virt="virtual"><scope>Vectr</scope><name>operator==</name></member>
      <member refid="struct_position_1a41b600238d7f4b174ed2c7dcd1ff8214" prot="public" virt="virtual"><scope>Vectr</scope><name>operator==</name></member>
      <member refid="struct_position_1aac17c8dcac3808518f5e13c7ecf31c19" prot="public" virt="non-virtual"><scope>Vectr</scope><name>overBounds</name></member>
      <member refid="struct_position_1a06da33376bc3a116664f8a34e816ba95" prot="public" virt="non-virtual"><scope>Vectr</scope><name>overXBounds</name></member>
      <member refid="struct_position_1a45f215fed381839bf860752780a9660f" prot="public" virt="non-virtual"><scope>Vectr</scope><name>overYBounds</name></member>
      <member refid="struct_position_1ae3a67f3e6f27a5594c181ca55d2b2ef3" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1a82e58f222f30e32c322d77bf9a20352b" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1a01b903d664fb8ac74a9342116ce63287" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1a14a1831fd5c139aef062778edc05397d" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1a5f4ebf0205cb9e52e6f78784ca34d733" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1aa7e02fe8aeff4147c31184d981813f9d" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1a7b49db88251912bf531acec16719eb98" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1adfe6dffd68cbf7f26945bfb1a307fa6c" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1a370b6460b790eef270233cd7a3527721" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1a1072383b9a22b17759b55f897986f011" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1a410251ddeee4121896cac284e3d63de2" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1ae82fce224d7ef1599321a94b0a6f0cee" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Position</name></member>
      <member refid="struct_position_1af6cf3e9c2a535e8d988739e075ca76c1" prot="public" virt="virtual"><scope>Vectr</scope><name>setAll</name></member>
      <member refid="struct_position_1abecde70eb2df3f274e171a06386feb4c" prot="public" virt="virtual"><scope>Vectr</scope><name>setAll</name></member>
      <member refid="struct_position_1a03ff8fcf39be2dc2ac547b9849a03fd6" prot="public" virt="virtual"><scope>Vectr</scope><name>setAll</name></member>
      <member refid="struct_position_1ae7ad6637ca006d95867059c5405c2fdc" prot="public" virt="virtual"><scope>Vectr</scope><name>setAll</name></member>
      <member refid="struct_position_1a90a919f4e1d7cdd0fcc50101d4c9dbd0" prot="public" virt="virtual"><scope>Vectr</scope><name>setAll</name></member>
      <member refid="struct_position_1ae27c3958d1827450e434a8b2bb4d1092" prot="public" virt="virtual"><scope>Vectr</scope><name>setAll</name></member>
      <member refid="struct_position_1ad625d6ef1db5f72883c6e2834f7cae81" prot="public" virt="virtual"><scope>Vectr</scope><name>setAllZero</name></member>
      <member refid="struct_position_1a8ff94b86d9853ec1323129e2864a2f8d" prot="public" virt="virtual"><scope>Vectr</scope><name>setX</name></member>
      <member refid="struct_position_1af1ca6db4823de1c43f874e72ce2b9b66" prot="public" virt="virtual"><scope>Vectr</scope><name>setX</name></member>
      <member refid="struct_position_1ab816c27eddb9c5d4951edfbb78dc7233" prot="public" virt="virtual"><scope>Vectr</scope><name>setY</name></member>
      <member refid="struct_position_1a45f946eeadc660099a5c38f882e9074e" prot="public" virt="virtual"><scope>Vectr</scope><name>setY</name></member>
      <member refid="struct_position_1aa2c5e74e13456b840ce39ae8fc09c59b" prot="public" virt="virtual"><scope>Vectr</scope><name>setZ</name></member>
      <member refid="struct_position_1ac3dd191a672bd9696e6bb2ccf3a622e2" prot="public" virt="virtual"><scope>Vectr</scope><name>setZ</name></member>
      <member refid="struct_vectr_1a2dc13bbf566571029a2069a87d165b30" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>sharedVelBool</name></member>
      <member refid="struct_vectr_1a1cc9dc723075fb24116b6a78ac73e786" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>sharedVelMutex</name></member>
      <member refid="struct_position_1a4ebba65bc16bffa822c653522c5d7dcb" prot="public" virt="non-virtual"><scope>Vectr</scope><name>toString</name></member>
      <member refid="struct_vectr_1a577bdf47f67b34585ee08696679b2232" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>totalDistanceMoved</name></member>
      <member refid="struct_vectr_1a072798a344fe237c3456f1e962f18672" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>update</name></member>
      <member refid="struct_vectr_1a94b119ab4adb045161a80a5278dbe0f1" prot="public" virt="non-virtual"><scope>Vectr</scope><name>updateAndNormalize</name></member>
      <member refid="struct_vectr_1ae04cf340dddfe1cd05c8dec90e34dd4a" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1a420d21073da712360069e09ae8053375" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1ad66fbd7bd3c07f5dbbc3219fe55b38a1" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1a9be0609df512b225181c555f1c9adecb" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1a70f3b6c158dc21d03cb449093126b939" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1a80e5b2b4bafb5689b82bdf5d87cc4b49" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1a8328879b18c117c7b262ce53f5f1acb2" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1abf42e2cb15d0406f24c5901dbf0a07e1" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1a394981732ad6d227e5fe1f25f783ce99" prot="public" virt="non-virtual"><scope>Vectr</scope><name>Vectr</name></member>
      <member refid="struct_vectr_1aef611170eac7b1341ff345b9bb108eb7" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>velocity</name></member>
      <member refid="struct_position_1af908be922fc88d89d81be7d08d06f761" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>x</name></member>
      <member refid="struct_position_1aa5715ebd88d355988b0c0cf03814a271" prot="public" virt="virtual"><scope>Vectr</scope><name>x_minus_one</name></member>
      <member refid="struct_position_1ab96af6ce73be6d52132f4d4e5bf77485" prot="public" virt="virtual"><scope>Vectr</scope><name>x_minus_one</name></member>
      <member refid="struct_position_1aca2bf935dd53d012fe3529b81a111e23" prot="public" virt="virtual"><scope>Vectr</scope><name>x_plus_one</name></member>
      <member refid="struct_position_1a86f84c270f732ee8a285f0d8672529ad" prot="public" virt="virtual"><scope>Vectr</scope><name>x_plus_one</name></member>
      <member refid="struct_position_1af434f54a0aad8bbfc3806ebdd197aa3b" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>y</name></member>
      <member refid="struct_position_1a9979106cd4c31b19ecbb831a91ec218a" prot="public" virt="virtual"><scope>Vectr</scope><name>y_minus_one</name></member>
      <member refid="struct_position_1a0c0ff46cc0329a0e0109084fb1856233" prot="public" virt="virtual"><scope>Vectr</scope><name>y_minus_one</name></member>
      <member refid="struct_position_1a9d1ef5169f798099ab268f62c5acc9e1" prot="public" virt="virtual"><scope>Vectr</scope><name>y_plus_one</name></member>
      <member refid="struct_position_1a4ac4b6f9dc9ab06e64ce7b16c5dcdfaa" prot="public" virt="virtual"><scope>Vectr</scope><name>y_plus_one</name></member>
      <member refid="struct_position_1ac430da98504c2d4fd685c0363d728474" prot="protected" virt="non-virtual"><scope>Vectr</scope><name>z</name></member>
      <member refid="struct_position_1a21a4e620b847f606fe2e1c5244f0f78e" prot="public" virt="virtual"><scope>Vectr</scope><name>~Position</name></member>
      <member refid="struct_vectr_1affbf285f9295dd163cc8b0364b871ade" prot="public" virt="non-virtual"><scope>Vectr</scope><name>~Vectr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
