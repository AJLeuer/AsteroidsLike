<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_input_8cpp" kind="file">
    <compoundname>Input.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="_input_8hpp" local="yes">Input.hpp</includes>
    <incdepgraph>
      <node id="174">
        <label>list</label>
      </node>
      <node id="201">
        <label>iomanip</label>
      </node>
      <node id="172">
        <label>functional</label>
      </node>
      <node id="197">
        <label>queue</label>
      </node>
      <node id="207">
        <label>limits</label>
      </node>
      <node id="204">
        <label>BasicConcurrency.h</label>
        <link refid="_basic_concurrency_8h"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="202">
        <label>assert.h</label>
      </node>
      <node id="178">
        <label>SDL2/SDL_video.h</label>
      </node>
      <node id="210">
        <label>../World/GameInterface.h</label>
        <link refid="_game_interface_8h"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="209">
        <label>ForwardDecl.h</label>
        <link refid="_forward_decl_8h"/>
      </node>
      <node id="185">
        <label>SDL2/SDL_render.h</label>
      </node>
      <node id="203">
        <label>Timer.hpp</label>
        <link refid="_timer_8hpp"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
      </node>
      <node id="188">
        <label>cmath</label>
      </node>
      <node id="187">
        <label>string</label>
      </node>
      <node id="191">
        <label>fstream</label>
      </node>
      <node id="180">
        <label>ostream</label>
      </node>
      <node id="179">
        <label>../World/GameState.hpp</label>
        <link refid="_game_state_8hpp"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
      </node>
      <node id="206">
        <label>GameRandom.hpp</label>
        <link refid="_game_random_8hpp"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="175">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="208">
        <label>random</label>
      </node>
      <node id="184">
        <label>condition_variable</label>
      </node>
      <node id="171">
        <label>vector</label>
      </node>
      <node id="176">
        <label>SDL2/SDL_events.h</label>
      </node>
      <node id="192">
        <label>../Control/Configuration.h</label>
        <link refid="_configuration_8h"/>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
      </node>
      <node id="183">
        <label>array</label>
      </node>
      <node id="181">
        <label>sstream</label>
      </node>
      <node id="169">
        <label>Input.hpp</label>
        <link refid="_input_8hpp"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="200">
        <label>Velocity.hpp</label>
        <link refid="_velocity_8hpp"/>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="201" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="186">
        <label>../Util/Util.hpp</label>
        <link refid="_util_8hpp"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>iostream</label>
      </node>
      <node id="198">
        <label>deque</label>
      </node>
      <node id="195">
        <label>DefaultConfig.h</label>
        <link refid="_default_config_8h"/>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
      </node>
      <node id="199">
        <label>BoundsCheck.hpp</label>
        <link refid="_bounds_check_8hpp"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>mutex</label>
      </node>
      <node id="193">
        <label>chrono</label>
      </node>
      <node id="189">
        <label>SDL2/SDL_rect.h</label>
      </node>
      <node id="196">
        <label>../Util/Position.hpp</label>
        <link refid="_position_8hpp"/>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
      </node>
      <node id="170">
        <label>thread</label>
      </node>
      <node id="212">
        <label>CharacterData.h</label>
        <link refid="_character_data_8h"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Control/Input.cpp</label>
        <link refid="Input.cpp"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="211">
        <label>Message.h</label>
        <link refid="_message_8h"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
      </node>
      <node id="190">
        <label>../Util/Debug.h</label>
        <link refid="_debug_8h"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="194">
        <label>../Output/DisplayData.h</label>
        <link refid="_display_data_8h"/>
      </node>
      <node id="177">
        <label>SDL2/SDL_keyboard.h</label>
      </node>
      <node id="205">
        <label>memory</label>
      </node>
      <node id="173">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Input.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>World</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Created<sp/>by<sp/>Adam<sp/>James<sp/>Leuer<sp/>on<sp/>5/31/14.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2014<sp/>Adam<sp/>James<sp/>Leuer.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_input_8hpp" kindref="compound">Input.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std<sp/>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="class_event_register_base_1a09c3207daecbf7df0da8e9a9c0d9fa46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_event_register_base_1a09c3207daecbf7df0da8e9a9c0d9fa46" kindref="member">EventRegisterBase::callBack</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((memberToCallOn<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(member_callBackFunction<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>this<sp/>is<sp/>an<sp/>instance<sp/>member<sp/>function<sp/>(we&apos;ll<sp/>know<sp/>by<sp/>checking<sp/>that<sp/>member_callOn<sp/>isn&apos;t<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null)<sp/>then<sp/>call<sp/>it<sp/>on<sp/>that<sp/>object)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(memberToCallOn-&gt;*member_callBackFunction)();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//if<sp/>(memberToCallOn<sp/>==<sp/>nullptr)<sp/>//else<sp/>this<sp/>is<sp/>a<sp/>global<sp/>or<sp/>static<sp/>function,<sp/>just<sp/>call<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(callBackFunction)()<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callBackFunction()<sp/>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_event_register_1a452eea8df05259c4c337960f8907003f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_event_register_1a452eea8df05259c4c337960f8907003f" kindref="member">EventRegister::handleEvent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_input_8hpp_1a968dbade547d18c0fc972caf39d984e8" kindref="member">Event</ref><sp/>*<sp/>currentEvent)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentEvent-&gt;type<sp/>==<sp/>eventType)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callBack()<sp/>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_key_input_register_1a0e5993cb2e93f288a4acf7d34da6edad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_key_input_register_1a0e5993cb2e93f288a4acf7d34da6edad" kindref="member">KeyInputRegister::checkForPressedKeys</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>keyboardState,<sp/>vector&lt;ScanCode&gt;::iterator<sp/>scanCode)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*scanCode<sp/>==<sp/>scanCodes.back())<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyboardState[*scanCode])<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>true<sp/>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>false<sp/>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current<sp/>=<sp/>scanCode<sp/>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>scanCode<sp/>+<sp/>1<sp/>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(requestedKeyEvalMethod<sp/>==<sp/><ref refid="_input_8hpp_1ac32d0351518cb71146a1cd777bc4fc91a1833e28b1fa85353670f723a1719f49e" kindref="member">KeypressEvaluationMethod::exactlyOne</ref>)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss<sp/>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>KeyInputRegistry<sp/>with<sp/>KeypressEvaluationMethod::exactlyOne<sp/>has<sp/>more<sp/>than<sp/>one<sp/>keypress<sp/>registered&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>a<sp/>breakpoint<sp/>in<sp/>checkForPressedKeys()<sp/>to<sp/>debug&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_debug_8h_1a060bbb38ef3767737e942eaf39c0227a" kindref="member">DebugOutput</ref><sp/>&lt;&lt;<sp/>ss.rdbuf()<sp/>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>false<sp/>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(requestedKeyEvalMethod<sp/>==<sp/><ref refid="_input_8hpp_1ac32d0351518cb71146a1cd777bc4fc91aa181a603769c1f98ad927e7367c7aa51" kindref="member">KeypressEvaluationMethod::all</ref>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((keyboardState[*current])<sp/>&amp;&amp;<sp/>(checkForPressedKeys(keyboardState,<sp/>next)))<sp/>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>(requestedKeyEvalMethod<sp/>==<sp/>KeypressEvaluationMethod::any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((keyboardState[*current])<sp/>||<sp/>(checkForPressedKeys(keyboardState,<sp/>next)))<sp/>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_key_input_register_1a076a886cd83efe7d7aaa11f670d75e61" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_key_input_register_1a076a886cd83efe7d7aaa11f670d75e61" kindref="member">KeyInputRegister::handleKeyboardInput</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>keyboardState)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scanCode<sp/>=<sp/>scanCodes.begin()<sp/>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkForPressedKeys(keyboardState,<sp/>scanCode))<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callBack()<sp/>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">vector&lt;EventRegister<sp/>*&gt;<sp/>*<sp/><ref refid="class_input_controller_1afe327cb5fda23f106b0614d9119b1714" kindref="member">InputController::eventListenerRegistry</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>vector&lt;EventRegister<sp/>*&gt;()<sp/>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">vector&lt;KeyInputRegister<sp/>*&gt;<sp/>*<sp/><ref refid="class_input_controller_1a2e26dc4af1946fa78c817f2bd3f4a319" kindref="member">InputController::keyInputRegistry</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>vector&lt;KeyInputRegister<sp/>*&gt;()<sp/>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="_input_8hpp_1a968dbade547d18c0fc972caf39d984e8" kindref="member">Event</ref><sp/>*<sp/><ref refid="class_input_controller_1aa88d822c29ba14ed6fc2b35f171161ce" kindref="member">InputController::event</ref><sp/>=<sp/>(<ref refid="_input_8hpp_1a968dbade547d18c0fc972caf39d984e8" kindref="member">Event</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="_input_8hpp_1a968dbade547d18c0fc972caf39d984e8" kindref="member">Event</ref>))<sp/>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="class_input_controller_1a17d54f67ffd783a8fca81a94a6de02e7" kindref="member">InputController::keys</ref><sp/>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1a95bfc98ab2e37c9772b678e9b561c97d" kindref="member">InputController::keyArraySize</ref><sp/>=<sp/>1<sp/>;<sp/></highlight><highlight class="comment">//initializing<sp/>to<sp/>1<sp/>only<sp/>because<sp/>SDL_GetKeyboardState<sp/>requires<sp/>non-null<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="class_input_controller_1a550227f0a95207f5361354135e80d191" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1a550227f0a95207f5361354135e80d191" kindref="member">InputController::listenForEvents</ref>()<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((SDL_PollEvent(event))<sp/>&amp;&amp;<sp/>(<ref refid="_game_state_8hpp_1afcd77fe85e33843db5dac97e8480e184" kindref="member">GLOBAL_CONTINUE_FLAG</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>((i<sp/>&lt;<sp/>eventListenerRegistry-&gt;size())<sp/>&amp;&amp;<sp/>(<ref refid="_game_state_8hpp_1afcd77fe85e33843db5dac97e8480e184" kindref="member">GLOBAL_CONTINUE_FLAG</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventListenerRegistry-&gt;at(i)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventListenerRegistry-&gt;at(i)-&gt;handleEvent(event)<sp/>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="class_input_controller_1a1e87ceb31ecdcd8bb0ee1af102b20c8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1a1e87ceb31ecdcd8bb0ee1af102b20c8a" kindref="member">InputController::listenForKeypress</ref>()<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>((<ref refid="_game_state_8hpp_1afcd77fe85e33843db5dac97e8480e184" kindref="member">GLOBAL_CONTINUE_FLAG</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(i<sp/>&lt;<sp/>keyInputRegistry-&gt;size()))<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyInputRegistry-&gt;at(i)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_PumpEvents()<sp/>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyInputRegistry-&gt;at(i)-&gt;handleKeyboardInput(keys)<sp/>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="class_input_controller_1aa12eb24fffc0010eb4101c56d0b06dc5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1aa12eb24fffc0010eb4101c56d0b06dc5" kindref="member">InputController::init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//keyInputRegistry<sp/>is<sp/>already<sp/>initialized.<sp/>add<sp/>anything<sp/>else<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SDL<sp/>automatically<sp/>inits<sp/>events<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdlinit_error<sp/>=<sp/>SDL_InitSubSystem(SDL_INIT_GAMECONTROLLER|SDL_INIT_JOYSTICK)<sp/>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdlinit_error<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss<sp/>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SDL_InitSubSystem(SDL_INIT_GAMECONTROLLER|SDL_INIT_JOYSTICK)<sp/>failed.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>SDL_GetError()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>ss.rdbuf()<sp/>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>exception()<sp/>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>keys<sp/>=<sp/>SDL_GetKeyboardState(&amp;keyArraySize)<sp/>;<sp/></highlight><highlight class="comment">//only<sp/>need<sp/>to<sp/>call<sp/>once,<sp/>stores<sp/>pointer<sp/>that<sp/>stays<sp/>valid<sp/>for<sp/>program<sp/>duration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="class_input_controller_1a34126fbb3541313ed0b1b3eaddb0f9e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1a34126fbb3541313ed0b1b3eaddb0f9e7" kindref="member">InputController::registerForEvent</ref>(<ref refid="class_event_register" kindref="compound">EventRegister</ref><sp/>*reg)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>eventListenerRegistry-&gt;push_back(reg)<sp/>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="class_input_controller_1a0b9059be3b8f5cf7dc60bd295ffe205e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1a0b9059be3b8f5cf7dc60bd295ffe205e" kindref="member">InputController::registerForKeypress</ref>(<ref refid="class_key_input_register" kindref="compound">KeyInputRegister</ref><sp/>*<sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>keyInputRegistry-&gt;push_back(reg)<sp/>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>Deregisters<sp/>any<sp/>KeyInputRegistries<sp/>and<sp/>EventRegistries<sp/>registered<sp/>with<sp/>the<sp/>object<sp/>registeredObject</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>as<sp/>the<sp/>memberToCallOn</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@param<sp/>registeredObject<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>object<sp/>whose<sp/>KeyInputRegister(s)<sp/>and<sp/>EventRegistries<sp/>should<sp/>be<sp/>deleted</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="class_input_controller_1a995431661911a85ae39f1591932e4e20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1a995431661911a85ae39f1591932e4e20" kindref="member">InputController::deregister</ref>(<ref refid="class_game_interface" kindref="compound">GameInterface</ref><sp/>*<sp/>registeredObject)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>keyInputRegistry-&gt;size()<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyInputRegistry-&gt;at(i)-&gt;memberToCallOn<sp/>==<sp/>registeredObject)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>keyInputRegistry-&gt;at(i)<sp/>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyInputRegistry-&gt;at(i)<sp/>=<sp/>nullptr<sp/>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>eventListenerRegistry-&gt;size()<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventListenerRegistry-&gt;at(i)-&gt;memberToCallOn<sp/>==<sp/>registeredObject)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>eventListenerRegistry-&gt;at(i)<sp/>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventListenerRegistry-&gt;at(i)<sp/>=<sp/>nullptr<sp/>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="class_input_controller_1ab7e7e742d0b250effa849ed2581e2eb2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1ab7e7e742d0b250effa849ed2581e2eb2" kindref="member">InputController::update</ref>()<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>listenForKeypress()<sp/>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>listenForEvents()<sp/>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="class_input_controller_1a95e9c9c2be3a581d4e10fff159007c68" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_input_controller_1a95e9c9c2be3a581d4e10fff159007c68" kindref="member">InputController::exit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>keyInputRegistry-&gt;size()<sp/>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyInputRegistry-&gt;at(i)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>keyInputRegistry-&gt;at(i)<sp/>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>keyInputRegistry<sp/>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>event<sp/>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_QuitSubSystem(SDL_INIT_GAMECONTROLLER|SDL_INIT_JOYSTICK)<sp/>;<sp/></highlight><highlight class="comment">/*<sp/>call<sp/>SDL_QuitSubSystem()<sp/>for<sp/>each<sp/>subsystem<sp/>we<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Volumes/OS X HDD/Users/Adam/Developer/SpriteFight/Control/Input.cpp"/>
  </compounddef>
</doxygen>
